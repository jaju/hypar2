#pragma once
#include "localdefs.h"
#include "hash.hpp"
#include "hashmap.hpp"
#include "tag.hpp"
#include "tree.hpp"
#include <vector>
using std::vector;

BEGIN_NAMESPACE(hy);

typedef HashMap <const _char *, const _char *, strcasehash, eqcase> PropertyMap;

/**
 * The DOM element
 *
 * The tree is made up of DOMData nodes. This tree is generated by the
 * XML::parse call. One can derive from this basic DOMData class, and
 * do all analysis stuff in the derived class. DOMData provides only
 * basic functionality.
 */

class DOMData
{
    public:
        typedef void (*CallBack) (DOMData *, void *);
        typedef enum
        {
            END = -1,
            ELEMENT,
            TEXT,
            COMMENT
        }
        NodeType;

    public:
        const NodeType type() { return m_type; }
        void setType(NodeType type) { m_type = type; }
        const char *name() const { return m_pName; }
        void setName(const char *name) { m_pName = name; }
        const char *content() const { return m_pContent; }
        bool selfClosing() { return m_bSelfClosing; }
        void setSelfClosing(bool s) { m_bSelfClosing = s; }

    protected:
        void reset ();

    public:
        DOMData ();
        DOMData (const DOMData &other);
        DOMData (NodeType nodeType, const _char *pStr);
        virtual ~DOMData ();

    public:
        int addProperty (pair <const _char *, const _char *> &p);
        int addProperty (const _char *pName, const _char *pValue);
        int copyAttributes (Tag *tag);
        const _char *findProperty (const _char *pName) const;
        const PropertyMap *getPropertyMap() { return m_pPropertyMap; }

    public:
        inline bool equals (const _char *pName) const
        {
            if (m_type == ELEMENT)
                return (_strcasecmp (pName, m_pName) ? false : true);
            return false;
        }

    protected:
        void initData(NodeType nodeType, const _char *pStr);
        PropertyMap *m_pPropertyMap;
        NodeType m_type;
        const _char *m_pName, *m_pContent;
        bool m_bSelfClosing;

};

typedef TreeNode<DOMData> DOMNode;
typedef list <DOMNode * > NodeList;

void toString (DOMNode *node, _string &targetString, bool bChildOnly = false);
_string toString(DOMNode *node, bool bChildOnly = false);
void toText (DOMNode *node, _string &targetString, bool bChildOnly = false);

END_NAMESPACE(hy);
